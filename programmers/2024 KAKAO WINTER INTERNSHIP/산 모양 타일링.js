// [0] 일경우 변길이 1인 정삼각형 4개가 합체해 변길이 2인 정상각형 1개를 만들 수 있음
// [0, 1] 일경우 밑변은 3이고,
// 아랫변: n + 1, 윗변: n
// 큰삼각형은 탑 있으면 3개, 없으면 2개를 창출
// n = 1 = 큰삼1개, n = 2 = 큰삼2개, n = 3 = 큰삼3개
// 아랫변 2 큰삼 1개, 아랫변 3 큰삼 2개.
// [0, 1]: 큰 삼 2개, 한개는 3의 가중치 하나는 2의 가중치 얘네를 조합하면 11가짓수가 나옴
// => 각 삼각형마다 사다리꼴 하나씩있는 경우: 6개라 볼 수 있지만 공유 삼각형의 존재로 공유안하는 3 + 공유하는 가짓수 + 2 로 5개
// 하나에만 삼각형이 있는 경우: 2 + 3 = 5
// 모두 삼각형이 없는 경우 = 1
// 5 + 5 + 1 = 11
// 큰 삼각형에서 오른쪽 삼각형이 없다고 가정하면 top 이 없을시 무소유, 왼쪽 사다리꼴 총 2가지의 경우의 수가 나오고 오른쪽 삼각형이 있다고 가정하면 3가지 경우가 나옴
// top 이 있을시에는 모든 상태 + 1
// 84분
function solution(n, tops) {
    // A는 빚없는 완전체
    const MOD = 1e4 + 7
    const dpA = [3]
    const dpB = [2]

    if (tops[0] === 1) {
        dpA[0] = 4
        dpB[0] = 3
    }

    // dpA = 3, dpB = 2 | top 있다는 가정하에 dpA가 11이 나오게 점화식을 짜야함
    // 반대로, dpA = 4, dpB = 3 | top 없다는 가정하에 dpA가 11이 나오게
    for (let i = 0; i < n - 1; i++) {
        if (tops[i + 1] === 1) {
            dpA[i + 1] = (dpA[i] * 3 + dpB[i]) % MOD
            dpB[i + 1] = (dpA[i] * 2 + dpB[i]) % MOD
        } else {
            dpA[i + 1] = (dpA[i] * 2 + dpB[i]) % MOD
            dpB[i + 1] = (dpA[i] + dpB[i]) % MOD
        }
    }

    return dpA.at(-1)
}