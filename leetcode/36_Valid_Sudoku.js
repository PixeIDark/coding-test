// 스도쿠 true false 마음꺽여서 포기함 ㅋ

const board1 = [
  ["5", "3", ".", ".", "7", ".", ".", ".", "."],
  ["6", ".", ".", "1", "9", "5", ".", ".", "."],
  [".", "9", "8", ".", ".", ".", ".", "6", "."],
  ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
  ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
  ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
  [".", "6", ".", ".", ".", ".", "2", "8", "."],
  [".", ".", ".", "4", "1", "9", ".", ".", "5"],
  [".", ".", ".", ".", "8", ".", ".", "7", "9"],
]; // true

const board2 = [
  ["8", "3", ".", ".", "7", ".", ".", ".", "."],
  ["6", ".", ".", "1", "9", "5", ".", ".", "."],
  [".", "9", "8", ".", ".", ".", ".", "6", "."],
  ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
  ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
  ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
  [".", "6", ".", ".", ".", ".", "2", "8", "."],
  [".", ".", ".", "4", "1", "9", ".", ".", "5"],
  [".", ".", ".", ".", "8", ".", ".", "7", "9"],
]; // false

// 첫 뎁스가 세로 두 번째 뎁스가 가로

var isValidSudoku = function (board) {
  let n = board.length;
  let a = new Array(n).fill([]);

  for (let i = 1; i <= n; i++) {
    for (let j = 1; j <= n; j++) {
      if (board[i - 1][j - 1] !== ".") {
        if (i <= 3) {
          if (j <= 3) {
            a[Math.ceil(j / 3) - 1].push(board[i - 1][j - 1]);
          }
          if (3 < j && j <= 6) {
            a[Math.ceil(j / 3) + 2].push(board[i - 1][j - 1]);
          }
          if (j > 6) {
            a[Math.ceil(j / 3) + 5].push(board[i - 1][j - 1]);
          }
        }
        if (3 < i && i <= 6) {
          if (j <= 3) {
            a[Math.ceil(j / 3) - 1].push(board[i - 1][j - 1]);
          }
          if (3 < j && j <= 6) {
            a[Math.ceil(j / 3) + 2].push(board[i - 1][j - 1]);
          }
          if (j > 6) {
            a[Math.ceil(j / 3) + 5].push(board[i - 1][j - 1]);
          }
        }
        if (i > 6) {
          if (j <= 3) {
            a[Math.ceil(j / 3) - 1].push(board[i - 1][j - 1]);
          }
          if (3 < j && j <= 6) {
            a[Math.ceil(j / 3) + 2].push(board[i - 1][j - 1]);
          }
          if (j > 6) {
            a[Math.ceil(j / 3) + 5].push(board[i - 1][j - 1]);
          }
        }
      }
    }
  }

  return a;
};

console.log(isValidSudoku(board2));
